[user]
	name = doiken
	email = doiken@users.noreply.github.com
[core]
  editor = vim
	excludesfile = ~/.gitignore_global
	hooksPath = /Users/doi_kenji/.git_template/hooks
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[color]
	ui = auto
[alias]
  bda = !git branch -a --merged | grep -v master | grep remotes/origin| sed -e 's% *remotes/origin/%%' | xargs -I% git push origin :%
  pp = !git push origin `git rev-parse --abbrev-ref HEAD`
  ppf = !git push origin `git rev-parse --abbrev-ref HEAD` ---force-with-lease
  st = status
  # https://qiita.com/awakia/items/f14dc6310e469964a8f7
  showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #'; }; f"
	openpr = "!f() { hub browse -- `git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1 | cut -f5 -d' ' | sed -e 's%#%pull/%'`; }; f"
  cl = clean
  clf = clean -f
  cla = clean -fd
  clear = "!f() { git branch --merged | egrep -v \"(^\\*|master|main)\" | xargs git branch -d; git branch --list 'tmp/REVIEW*' 'tmp/MERGED*' | xargs git branch -D;  }; f"
  # https://github.blog/jp/2021-01-13-get-up-to-speed-with-partial-clone-and-shallow-clone/
  clo = clone --single-branch --depth 1 # shallow clone: for nearly download purpose
  clb = clone --filter=blob:none # blobless clone: for quick and effective clone
  ci = commit
  cim = "!f() { git commit -m \"$*\"; }; f"
  cif = commit --fixup
  cia = commit --amend     # 直前のcommitを修正
  cp = cherry-pick
  co = checkout --no-guess
  cot = "!f() { git branch -D tmp/MERGED-`git rev-parse --abbrev-ref HEAD` 2>/dev/null; git checkout -b tmp/MERGED-`git rev-parse --abbrev-ref HEAD`; git fetch; git merge --no-edit origin/master; }; f"
  # branch関連
  b  = branch
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # stash
  ss = stash save
  sl = stash list
  sa = stash apply
  sp = stash pop
  # logをtree表示
  lg = log --graph --name-status --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lgg = !git log --graph --name-status --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative `git branch | awk '($1==\"*\"){print \"origin/\"$2}'`
  lga = log --graph --name-status --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # reset
  r   = reset HEAD
  rr  = reset HEAD~
  rrr = reset HEAD~~
  r1  = reset HEAD~
  r2  = reset HEAD~~
  r3  = reset HEAD~~~
  # rebase
  rb = rebase
  rbi = "!f() { git rebase -i "HEAD~${1}"; }; f"
  rba = rebase --abort
  rbc = rebase --continue
  # diff関連
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  df = "!f() { git diff $1 HEAD "${@:2}"; }; f"
  dff = "!f() { git diff $1 HEAD~ "${@:2}"; }; f"
  dfs = diff --staged        # 同上(1.6.1移行)
  dfc = "!f() { t=$1; shift; git diff $t~ $t "$@"; }; f" # そのコミットの差分
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  # pr
  pr = pull-request
  # to use process substitution, call via bash -c "" https://stackoverflow.com/questions/31827146/how-to-use-a-parenthesis-character-inside-a-command-substitution-inside-a-bash-s
  pro = "!f() { NUM=`git branch | grep '*' | perl -pe 's/\\* ([0-9]*).*/\\$1/g'`; bash -c \"hub pull-request -o -F <(sed -e 's/XXXXX/$NUM/g' ~/.tmpl/PULL_REQUEST_TEMPLATE.md .github/PULL_REQUEST_TEMPLATE.md 2>/dev/null) --edit $@\"; }; f"
  rmr = !git branch -a --merged | grep -v master | grep remotes/origin| sed -e 's% *remotes/origin/%%' | xargs -I% git push origin :%
  ignore = update-index --assume-unchanged
  noignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  review = "!f() { b=tmp/REVIEW-${1}; git branch -D $b &>/dev/null; git checkout -b ${b}; git fetch; git merge --no-edit --no-ff origin/${1}; git reset HEAD~; }; f"
  reviewed = "!f() { git clean -fd; git checkout .; git checkout $1; }; f"
  where = check-ignore -v 
[rebase]
  autosquash = true
  autostash = true
[fetch]
  prune = true
[merge]
	ff = false
	tool = vimdiff
[gui]
	encoding = UTF-8
[pull]
	rebase = true
[push]
	default = matching
[diff]
	compactionHeuristic = true
[pager]
	log = diff-highlight | less
	show = diff-highlight | less
	diff = diff-highlight | less
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[init]
	defaultBranch = main

