[user]
	name = doiken
	email = doiken@users.noreply.github.com
[core]
  editor = vim
	excludesfile = ~/.gitignore_global
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[color]
	ui = auto
[alias]
  bda = !git branch -a --merged | grep -v master | grep remotes/origin| sed -e 's% *remotes/origin/%%' | xargs -I% git push origin :%
  pp = !git push origin `git rev-parse --abbrev-ref HEAD`
  st = status
  sh = show
  so = remote show origin
  showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #'; }; f"
  ft = fetch
  up = pull --rebase       # pull rebase
  rbm = rebase master      # masterへのrebaseはよく使うのでalias
  ad = add
  cl = clean
  clf = clean -f
  cla = clean -fd
  ci = commit
  cim = "!f() { git commit -m \"`git branch | perl -ne '/\\* ([0-9]+)-/ and print qq/[#$1] /'`$1\"; }; f"
  cif = commit --fixup
  cia = commit --amend     # 直前のcommitを修正
  cp = cherry-pick
  co = checkout
  # branch関連
  b  = branch
  ba = branch -a           # originも含めた全てのbranchを表示
  bm = branch --merged     # merge済みのbranchを表示
  bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
  wc = whatchanged         # logに変更されたファイルも一緒に出す
  ls = log --stat          # logに変更されたファイルも一緒に出す
  lp = log -p              # diffも一緒に出す
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # stash
  ss = stash save
  sl = stash list
  sa = stash apply
  sp = stash pop
  # logをtree表示
  lg = log --graph --name-status --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lgg = !git log --graph --name-status --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative `git branch | awk '($1==\"*\"){print \"origin/\"$2}'`
  lga = log --graph --name-status --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # reset
  r   = reset HEAD
  rr  = reset HEAD~
  rrr = reset HEAD~~
  r1  = reset HEAD~
  r2  = reset HEAD~~
  r3  = reset HEAD~~~
  # diff関連
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  df = diff HEAD             # HEADとdiff
  dff = diff HEAD~           # HEADから1つ前とdiff
  dfs = diff --staged        # 同上(1.6.1移行)
  dfc = "!f() { git diff $1~ $1; }; f" # そのコミットの差分
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
  gr = grep
  gn = grep -n
  # pr
  pr  = pull-request
  pro = pull-request -o
  # to use process substitution, call via bash -c "" https://stackoverflow.com/questions/31827146/how-to-use-a-parenthesis-character-inside-a-command-substitution-inside-a-bash-s
  pre = "!NUM=`git branch | grep '*' | perl -pe 's/\\* ([0-9]*).*/\\$1/g'`; bash -c \"hub pull-request -o -F <(cat ~/.tmpl/PULL_REQUEST_TEMPLATE.md | sed -e 's/XXXXX/$NUM/g') --edit\""
  rmr = !git branch -a --merged | grep -v master | grep remotes/origin| sed -e 's% *remotes/origin/%%' | xargs -I% git push origin :%
  ignore = update-index --assume-unchanged
  noignore = update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep "^[[:lower:]]"
[rebase]
  autosquash = true
[merge]
	ff = false
	tool = vimdiff
[gui]
	encoding = UTF-8
[pull]
	rebase = true
[push]
	default = matching
[diff]
	compactionHeuristic = true
[pager]
	log = diff-highlight | less
	show = diff-highlight | less
	diff = diff-highlight | less
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
